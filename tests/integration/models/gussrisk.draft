"""
Simple investment example with varying weight for risk using GUSS (GUSSRISK)

Portfolio selection model solved for alternative risk aversion parameters.

Keywords: nonlinear programming, portfolio optimization, GUSS, scenario analysis,
          investment planning
"""

from gamspy import (
    Set,
    Alias,
    Parameter,
    Variable,
    Equation,
    Container,
    Model,
    Sum,
    Card,
)
import gamspy.math as gams_math
import numpy as np
from gamspy import Problem, Sense


def main():
    cont = Container(system_directory="/opt/gams/gams44.0_linux_x64_64_sfx")

    # Data
    returns_recs = np.array(
        [
            [7, 6, 8, 5],
            [8, 4, 16, 6],
            [4, 8, 14, 6],
            [5, 9, -2, 7],
            [6, 7, 13, 6],
            [3, 10, 11, 5],
            [2, 12, -2, 6],
            [5, 4, 18, 6],
            [4, 7, 12, 5],
            [3, 9, -5, 6],
        ]
    )

    # Sets
    stocks = Set(
        cont,
        name="stocks",
        records=[f"buystock{i}" for i in range(1, 5)],
        description="potential investments",
    )
    events = Set(
        cont,
        name="events",
        records=[f"event{i}" for i in range(1, 11)],
        description="equally likely return states of nature",
    )

    s = Alias(cont, name="s", alias_with=stocks)
    sp = Alias(cont, name="sp", alias_with=stocks)
    e = Alias(cont, name="e", alias_with=events)

    # Parameters
    prices = Parameter(
        cont,
        name="prices",
        domain=[stocks],
        records=np.array([22, 30, 28, 26]),
        description="purchase prices of the stocks",
    )
    funds = Parameter(
        cont, name="funds", records=500, description="total investable funds"
    )
    returns = Parameter(
        cont,
        name="returns",
        domain=[events, stocks],
        records=returns_recs,
        description="returns by state of nature event",
    )
    mean = Parameter(
        cont,
        name="mean",
        domain=[stocks],
        description="mean returns to x(stocks)",
    )
    covar = Parameter(
        cont,
        name="covar",
        domain=[stocks, stocks],
        description="variance covariance matrix",
    )

    mean[s] = Sum(e, returns[e, s]) / Card(e)
    covar[s, sp] = Sum(
        e, (returns[e, sp] - mean[sp]) * (returns[e, s] - mean[s])
    ) / Card(e)

    rap = Parameter(
        cont, name="rap", records=0, description="risk aversion parameter"
    )

    # Variables
    invest = Variable(
        cont,
        name="invest",
        type="positive",
        domain=[stocks],
        description="money invested in each stock",
    )
    obj = Variable(cont, name="obj", description="number to be maximized")

    # Equations
    objj = Equation(
        cont, name="objj", description="objective function"
    )
    investav = Equation(
        cont,
        name="investav",
        
        description="investment funds available",
    )

    objj.expr = obj == Sum(s, mean[s] * invest[s]) - rap * (
        Sum([s, sp], invest[s] * covar[s, sp] * invest[sp])
    )

    investav.expr = Sum(s, prices[s] * invest[s]) <= funds

    evportfol = Model(cont, name="evportfol", equations=cont.getEquations())

    cont.solve(evportfol, problem=Problem.NLP, sense=Sense.MAX, objective=obj)

    variance = Parameter(cont, name="variance")
    variance = Sum(s, Sum(sp, invest.l[s] * covar[s, sp] * invest.l[sp]))

    riskaver_recs = np.array(
        [
            0.00e00,
            2.50e-04,
            5.00e-04,
            7.50e-04,
            1.00e-03,
            1.50e-03,
            2.00e-03,
            3.00e-03,
            5.00e-03,
            1.00e-02,
            1.10e-02,
            1.25e-02,
            1.50e-02,
            2.50e-02,
            5.00e-02,
            1.00e-01,
            3.00e-01,
            5.00e-01,
            1.00e00,
            2.50e00,
            5.00e00,
            1.00e01,
            1.50e01,
            2.00e01,
            4.00e01,
            8.00e01,
        ]
    )

    rapscenarios = Set(
        cont,
        name="rapscenarios",
        records=[f"r{i}" for i in range(26)],
        description="risk aversion parameters",
    )
    riskaver = Parameter(
        cont,
        name="riskaver",
        domain=[rapscenarios],
        records=riskaver_recs,
        description="risk aversion coeficient by risk aversion parameter",
    )

    stockoutput = Parameter(
        cont,
        name="stockoutput",
        domain=[rapscenarios, stocks],
        description="results for invest based on model runs with varying rap",
    )
    objlevel = Parameter(
        cont,
        name="objlevel",
        domain=[rapscenarios],
        description=(
            "results for objective function from model runs with varying rap"
        ),
    )
    investavshadow = Parameter(
        cont,
        name="investavshadow",
        domain=[rapscenarios],
        description=(
            "results for funds shadow price from model runs with varying rap"
        ),
    )

    dictionary = Set(
        cont,
        name="dictionary",
        domain=["*", "*", "*"],
        records=[
            ("rapscenarios", "scenario", "''"),
            ("rap", "param", "riskaver"),
            ("invest", "level", "stockoutput"),
            ("obj", "level", "objlevel"),
            ("investav", "marginal", "investavshadow"),
        ],
    )

    cont.solve(
        evportfol,
        problem=Problem.NLP,
        Sense.MAX,
        objective=obj,
        scenario=dictionary,
    )

    output = Parameter(cont, name="output", domain=["*", rapscenarios])

    for rr, _ in rapscenarios.records.itertuples(index=False):
        rap = riskaver[rr]
        #  load in solution information
        invest.l[s] = stockoutput[rr, s]
        obj.l.assign = objlevel[rr]
        investav.m.assign = investavshadow[rr]
        #  compute some items
        investav.l.assign = Sum(s, invest.l[s])
        variance.assign = Sum(
            [s, sp], invest.l[s] * covar[s, sp] * invest.l[sp]
        )
        output["rap", rr] = rap
        output[stocks, rr] = invest.l[stocks]
        output["obj", rr] = obj.l
        output["mean", rr] = Sum(s, mean[s] * invest.l[s])
        output["var", rr] = variance
        output["std", rr] = gams_math.sqrt(variance)
        output["shadprice", rr] = investav.m
        output["idle", rr] = funds - investav.l

    print(output.pivot())


if __name__ == "__main__":
    main()
