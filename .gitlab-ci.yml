default:
  tags:
    - linux

stages:
  - update
  - precommit
  - cli
  - test
  - engine
  - neos
  - docs
  - performance
  - website
  - upload

variables:
  MACHINES_CONTAINER_REG:
    value: registry.gams.com/devel/machines
    description: "URL to the container registry of the machines repository"
  PF_GITLAB_WEBSITE_TOKEN:
    value: $GITLAB_WEBSITE_TOKEN
    description: "Token for updating gams.com"
  PF_CUSTOM_BRANCH:
    value: $CUSTOM_BRANCH
    description: "Name of custom branch or 0 if published distribution with version as specified should be taken"
  PF_BUILDS_WWW_PATH:
    value: $BUILDS_WWW_PATH
    description: "URL path prefix for builds server"
  PF_BUILDS_SSH_PORT:
    value: $BUILDS_SSH_PORT
    description: "Port used for SSH connection to builds server"
  PF_BUILDS_SSH_SERVER:
    value: $BUILDS_SSH_SERVER
    description: "URL of the build server"
  PF_BUILDS_SSH_USER:
    value: $BUILDS_SSH_USER
    description: "Username used for SSH connection to builds server"
  PF_GAMS_LICENSE:
    value: $GAMS_LICENSE
    description: "GAMS license string used for testing"
  PF_PYPI_USERNAME:
    value: $PYPI_USERNAME
    description: "Username for PyPI"
  PF_PYPI_PASSWORD:
    value: $PYPI_PASSWORD
    description: "Password for PyPI"

# This job updates pre-commit hooks on a schedule
pre-commit-autoupdate:
  stage: update
  image: python:3.13
  script:
    - pip install pre-commit
    - pre-commit autoupdate

    # Check if the autoupdate actually changed the file
    - |
      if git diff --quiet .pre-commit-config.yaml; then
        echo "No pre-commit updates found. Exiting."
        exit 0
      fi

    # If changes are found, configure git and push
    - echo "Updates found. Committing and pushing..."
    - git config --global user.name "GitLab Bot"
    - git config --global user.email "gitlab-bot@${CI_SERVER_HOST}"
    
    # Use the Access Token to set the remote URL
    - git remote set-url origin "https://gitlab-ci-token:${PRECOMMIT_UPGRADE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    
    # Checkout the branch the schedule is targeting (e.g., 'develop')
    - git checkout $CI_COMMIT_REF_NAME
    - git add .pre-commit-config.yaml
    
    # Add [skip ci] to the commit message to prevent this push from triggering another pipeline
    - git commit -m "[CHORE] Automatically update pre-commit hooks [skip ci]"
    - git push origin HEAD:$CI_COMMIT_REF_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'


include: ['ci/.precommit-check.yml',
          'ci/.cli.yml',
          'ci/.test-leg.yml',
          'ci/.test-lag.yml',
          'ci/.test-dac.yml',
          'ci/.test-deg.yml',
          'ci/.test-wei.yml',
          'ci/.update-website.yml',
          'ci/.upload.yml',
          'ci/.docs.yml',
          'ci/.performance.yml']
