#
# GAMS - General Algebraic Modeling System Python API
#
# Copyright (c) 2023 GAMS Development Corp. <support@gams.com>
# Copyright (c) 2023 GAMS Software GmbH <support@gams.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
from __future__ import annotations

import os
import uuid
from typing import TYPE_CHECKING

from gams import GamsOptions

import gamspy._backend.backend as backend
import gamspy._miro as miro
import gamspy.utils as utils
from gamspy.exceptions import GamspyException, customize_exception

if TYPE_CHECKING:
    import io

    from gamspy import Container, Model


class Local(backend.Backend):
    def __init__(
        self,
        container: Container,
        options: GamsOptions,
        output: io.TextIOWrapper | None = None,
        model: Model | None = None,
    ) -> None:
        super().__init__(container, container._gdx_in, container._gdx_out)
        self.options = options
        self.options.license = container._license_path
        self.output = output
        self.model = model

    def is_async(self):
        return False

    def solve(self, is_implicit: bool = False, keep_flags: bool = False):
        # Generate gams string and write modified symbols to gdx
        gams_string, dirty_names = self.preprocess(keep_flags)

        # Run the model
        self.run(gams_string)

        # Synchronize GAMSPy with checkpoint and return a summary
        summary = self.postprocess(dirty_names, is_implicit)

        return summary

    def run(self, gams_string: str):
        job_id = "_" + str(uuid.uuid4())
        job_name = os.path.join(self.container.working_directory, job_id)
        with open(job_name + ".gms", "w") as gams_file:
            gams_file.write(gams_string)

        # prepare pf file
        self.options._input = job_name + ".gms"
        if not self.options.output:
            self.options.output = job_name + ".lst"
        self.options._sysdir = utils._get_gamspy_base_directory()

        scrdir = os.path.join(self.container.working_directory, "225a")
        os.makedirs(scrdir, exist_ok=True)
        self.options._scrdir = scrdir
        self.options._scriptnext = os.path.join(scrdir, "gamsnext.sh")

        pf_file = os.path.join(
            self.container.working_directory, job_name + ".pf"
        )
        self.options.export(pf_file)

        try:
            self.container._job = job_name
            self.container._process.stdout = self.output
            self.container._send_job(job_name, pf_file)

            if not self.is_async() and self.model:
                self.model._update_model_attributes()
        except GamspyException as exception:
            message = customize_exception(
                self.container.workspace, self.options, job_name, exception
            )
            exception.message = message
            raise exception
        finally:
            self.container._unsaved_statements = []
            self.container._delete_autogenerated_symbols()

    def postprocess(self, dirty_names: list[str], is_implicit: bool = False):
        symbols = dirty_names + self.container._import_symbols
        if len(symbols) != 0:
            self.container._load_records_from_gdx(
                self.container._gdx_out, symbols
            )

        miro.load_miro_symbol_records(self.container)

        if self.options.traceopt == 3 and not is_implicit:
            return self.prepare_summary(
                self.container.working_directory, self.options.trace
            )

        return None
