test-leg-3.9:
  stage: test
  when: on_success
  tags: [linux]
  image: python:3.9
  before_script:
    - git config --global user.email "puma@noreply.gams.com"
    - git config --global user.name "Gitlab Runner (puma)"
  script:
    - pip install virtualenv
    - virtualenv venv39
    - source venv39/bin/activate
    - pip install wheel build requests
    - python scripts/reinstall.py
    - gamspy install solver mpsge
    - gamspy install solver scip
    - gamspy install license $LOCAL_LICENSE
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@git.gams.com/fproske/gmswebui.git --branch gamspy --single-branch miro
    - if [ "$RUN_MIRO" == "1" ]; then cd miro && git status && ./scripts/test_gamspy_models.sh && cd ..; fi
    - coverage run --source=gamspy -m pytest -x -v -s -m 'unit or integration or engine or model_library' tests
    - if [ "$?" == "0" ]; then echo "All tests passed!"; else exit 1; fi
    - coverage report -m --data-file=".coverage"
    - coverage xml --data-file=".coverage"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    name: linux_3.9
    expire_in: 2 hours
    paths: [dist/*]
  coverage: '/TOTAL.*\s+(\d+\%)/'
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success

test-deg-3.9:
  stage: test
  when: on_success
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.9${CI_COMMIT_SHORT_SHA}" python=3.9
    - conda activate "$(pwd)/gamspy-env-3.9${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge
    - gamspy install solver scip
    - gamspy install license $LOCAL_LICENSE
    - coverage run --source=gamspy -m pytest -x -v -s -m 'unit or integration or engine or model_library' tests
    - if [ "$?" == "0" ]; then echo "All tests passed!"; else exit 1; fi
    - coverage report -m --data-file=".coverage"
    - coverage xml --data-file=".coverage"
  artifacts:
    name: macos_x86_64_3.9
    expire_in: 2 hours
    paths: [dist/*]
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - when: never

test-dac-3.9:
  stage: test
  when: on_success
  tags: [macos-arm64]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.9${CI_COMMIT_SHORT_SHA}" python=3.9
    - conda activate "$(pwd)/gamspy-env-3.9${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge
    - gamspy install solver scip
    - gamspy install license $LOCAL_LICENSE
    - coverage run --source=gamspy -m pytest -x -v -s -m 'unit or integration or engine or model_library' tests
    - if [ "$?" == "0" ]; then echo "All tests passed!"; else exit 1; fi
    - coverage report -m --data-file=".coverage"
    - coverage xml --data-file=".coverage"
  artifacts:
    name: macos_arm64_3.9
    expire_in: 2 hours
    paths: [dist/*]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success

test-wei-3.9:
  stage: test
  when: on_success
  tags: [windows]
  image:
    name: $MACHINES_CONTAINER_REG/wei/builder-full:latest
    entrypoint: [""]
  script:
    - conda create -y -n gamspy-env-3.9 python=3.9
    - conda env list
    - conda activate gamspy-env-3.9
    - $env:Path = "C:\Miniconda\envs\gamspy-env-3.9;C:\Miniconda\envs\gamspy-env-3.9\Scripts;" + $env:Path
    - python --version
    - python -m pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge
    - gamspy install solver scip
    - gamspy install license $LOCAL_LICENSE
    - coverage run --source=gamspy -m pytest -x -v -s -m 'unit or integration or engine or model_library' tests
    - coverage report -m --data-file=".coverage"
    - coverage xml --data-file=".coverage"
  artifacts:
    name: windows_3.9
    expire_in: 2 hours
    paths: [dist/*]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success
