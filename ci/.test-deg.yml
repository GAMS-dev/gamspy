#### TESTS #####
deg-test-3.13:
  stage: test
  needs: [deg-cli-3.9]
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.13${CI_COMMIT_SHORT_SHA}" python=3.13
    - conda activate "$(pwd)/gamspy-env-3.13${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge scip reshop
    - gamspy install license $LOCAL_LICENSE
    - coverage run --source=gamspy -m pytest -x -v -s -m 'unit or integration or model_library' tests
    - coverage report -m --data-file=".coverage"
    - coverage xml --data-file=".coverage"
  artifacts:
    name: macos_x86_64_3.13
    expire_in: 2 hours
    paths: [dist/*]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - when: never

deg-test-3.12:
  stage: test
  needs: [deg-cli-3.9]
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.12${CI_COMMIT_SHORT_SHA}" python=3.12
    - conda activate "$(pwd)/gamspy-env-3.12${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge scip reshop
    - gamspy install license $LOCAL_LICENSE
    - pytest -x -v -s -m 'unit or integration or model_library' tests
    - pytest -m "doc"
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - when: never

deg-test-3.11:
  stage: test
  needs: [deg-cli-3.9]
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.11${CI_COMMIT_SHORT_SHA}" python=3.11
    - conda activate "$(pwd)/gamspy-env-3.11${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge scip reshop
    - gamspy install license $LOCAL_LICENSE
    - pytest -x -v -s -m 'unit or integration or model_library' tests
    - pytest -m "doc"
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - when: never

deg-test-3.10:
  stage: test
  needs: [deg-cli-3.9]
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.10${CI_COMMIT_SHORT_SHA}" python=3.10
    - conda activate "$(pwd)/gamspy-env-3.10${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge scip reshop
    - gamspy install license $LOCAL_LICENSE
    - pytest -x -v -s -m 'unit or integration or model_library' tests
    - pytest -m "doc"
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - when: never

deg-test-3.9:
  stage: test
  needs: [deg-cli-3.9]
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.9${CI_COMMIT_SHORT_SHA}" python=3.9
    - conda activate "$(pwd)/gamspy-env-3.9${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - gamspy install solver mpsge scip reshop
    - gamspy install license $LOCAL_LICENSE
    - pytest -x -v -s -m 'unit or integration or model_library' tests
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop"
      when: on_success
    - when: never

#### ENGINE ####
deg-engine-3.13:
  stage: engine
  when: manual
  needs: []
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.13${CI_COMMIT_SHORT_SHA}" python=3.13
    - conda activate "$(pwd)/gamspy-env-3.13${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - pytest -x -v -s -m 'engine' tests

deg-engine-3.9:
  stage: engine
  when: manual
  needs: []
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.9${CI_COMMIT_SHORT_SHA}" python=3.9
    - conda activate "$(pwd)/gamspy-env-3.9${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - pytest -x -v -s -m 'engine' tests

#### NEOS ####
deg-neos-3.13:
  stage: neos
  when: manual
  needs: []
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.13${CI_COMMIT_SHORT_SHA}" python=3.13
    - conda activate "$(pwd)/gamspy-env-3.13${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - pytest -x -v -s -m 'neos' tests

deg-neos-3.9:
  stage: neos
  when: manual
  needs: []
  tags: [macos]
  script:
    - eval "$($MINICONDA shell.bash hook)"
    - ulimit -n 10240
    - python scripts/atomic_conda_create.py "gamspy-env-3.9${CI_COMMIT_SHORT_SHA}" python=3.9
    - conda activate "$(pwd)/gamspy-env-3.9${CI_COMMIT_SHORT_SHA}"
    - pip install wheel build
    - python scripts/reinstall.py
    - pytest -x -v -s -m 'neos' tests
